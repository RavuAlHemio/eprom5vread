#[doc = "Register `VREFBUF_CSR` reader"]
pub type R = crate::R<VREFBUF_CSR_SPEC>;
#[doc = "Register `VREFBUF_CSR` writer"]
pub type W = crate::W<VREFBUF_CSR_SPEC>;
#[doc = "Field `ENVR` reader - Voltage reference buffer mode enable This bit is used to enable the voltage reference buffer mode."]
pub type ENVR_R = crate::BitReader<ENVR_A>;
#[doc = "Voltage reference buffer mode enable This bit is used to enable the voltage reference buffer mode.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum ENVR_A {
    #[doc = "0: Internal voltage reference mode disable (external voltage reference mode)."]
    B_0X0 = 0,
    #[doc = "1: Internal voltage reference mode (reference buffer enable or hold mode) enable."]
    B_0X1 = 1,
}
impl From<ENVR_A> for bool {
    #[inline(always)]
    fn from(variant: ENVR_A) -> Self {
        variant as u8 != 0
    }
}
impl ENVR_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> ENVR_A {
        match self.bits {
            false => ENVR_A::B_0X0,
            true => ENVR_A::B_0X1,
        }
    }
    #[doc = "Internal voltage reference mode disable (external voltage reference mode)."]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == ENVR_A::B_0X0
    }
    #[doc = "Internal voltage reference mode (reference buffer enable or hold mode) enable."]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == ENVR_A::B_0X1
    }
}
#[doc = "Field `ENVR` writer - Voltage reference buffer mode enable This bit is used to enable the voltage reference buffer mode."]
pub type ENVR_W<'a, REG> = crate::BitWriter<'a, REG, ENVR_A>;
impl<'a, REG> ENVR_W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "Internal voltage reference mode disable (external voltage reference mode)."]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(ENVR_A::B_0X0)
    }
    #[doc = "Internal voltage reference mode (reference buffer enable or hold mode) enable."]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(ENVR_A::B_0X1)
    }
}
#[doc = "Field `HIZ` reader - High impedance mode This bit controls the analog switch to connect or not the VREF+ pin. Refer to for the mode descriptions depending on ENVR bit configuration."]
pub type HIZ_R = crate::BitReader<HIZ_A>;
#[doc = "High impedance mode This bit controls the analog switch to connect or not the VREF+ pin. Refer to for the mode descriptions depending on ENVR bit configuration.\n\nValue on reset: 1"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum HIZ_A {
    #[doc = "0: VREF+ pin is internally connected to the voltage reference buffer output."]
    B_0X0 = 0,
    #[doc = "1: VREF+ pin is high impedance."]
    B_0X1 = 1,
}
impl From<HIZ_A> for bool {
    #[inline(always)]
    fn from(variant: HIZ_A) -> Self {
        variant as u8 != 0
    }
}
impl HIZ_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> HIZ_A {
        match self.bits {
            false => HIZ_A::B_0X0,
            true => HIZ_A::B_0X1,
        }
    }
    #[doc = "VREF+ pin is internally connected to the voltage reference buffer output."]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == HIZ_A::B_0X0
    }
    #[doc = "VREF+ pin is high impedance."]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == HIZ_A::B_0X1
    }
}
#[doc = "Field `HIZ` writer - High impedance mode This bit controls the analog switch to connect or not the VREF+ pin. Refer to for the mode descriptions depending on ENVR bit configuration."]
pub type HIZ_W<'a, REG> = crate::BitWriter<'a, REG, HIZ_A>;
impl<'a, REG> HIZ_W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "VREF+ pin is internally connected to the voltage reference buffer output."]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(HIZ_A::B_0X0)
    }
    #[doc = "VREF+ pin is high impedance."]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(HIZ_A::B_0X1)
    }
}
#[doc = "Field `VRS` reader - Voltage reference scale This bit selects the value generated by the voltage reference buffer."]
pub type VRS_R = crate::BitReader<VRS_A>;
#[doc = "Voltage reference scale This bit selects the value generated by the voltage reference buffer.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum VRS_A {
    #[doc = "0: Voltage reference set to VREF_OUT1 (around 2.048 V)."]
    B_0X0 = 0,
    #[doc = "1: Voltage reference set to VREF_OUT2 (around 2.5 V)."]
    B_0X1 = 1,
}
impl From<VRS_A> for bool {
    #[inline(always)]
    fn from(variant: VRS_A) -> Self {
        variant as u8 != 0
    }
}
impl VRS_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> VRS_A {
        match self.bits {
            false => VRS_A::B_0X0,
            true => VRS_A::B_0X1,
        }
    }
    #[doc = "Voltage reference set to VREF_OUT1 (around 2.048 V)."]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == VRS_A::B_0X0
    }
    #[doc = "Voltage reference set to VREF_OUT2 (around 2.5 V)."]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == VRS_A::B_0X1
    }
}
#[doc = "Field `VRS` writer - Voltage reference scale This bit selects the value generated by the voltage reference buffer."]
pub type VRS_W<'a, REG> = crate::BitWriter<'a, REG, VRS_A>;
impl<'a, REG> VRS_W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "Voltage reference set to VREF_OUT1 (around 2.048 V)."]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(VRS_A::B_0X0)
    }
    #[doc = "Voltage reference set to VREF_OUT2 (around 2.5 V)."]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(VRS_A::B_0X1)
    }
}
#[doc = "Field `VRR` reader - Voltage reference buffer ready"]
pub type VRR_R = crate::BitReader<VRR_A>;
#[doc = "Voltage reference buffer ready\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum VRR_A {
    #[doc = "0: the voltage reference buffer output is not ready."]
    B_0X0 = 0,
    #[doc = "1: the voltage reference buffer output reached the requested level."]
    B_0X1 = 1,
}
impl From<VRR_A> for bool {
    #[inline(always)]
    fn from(variant: VRR_A) -> Self {
        variant as u8 != 0
    }
}
impl VRR_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> VRR_A {
        match self.bits {
            false => VRR_A::B_0X0,
            true => VRR_A::B_0X1,
        }
    }
    #[doc = "the voltage reference buffer output is not ready."]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == VRR_A::B_0X0
    }
    #[doc = "the voltage reference buffer output reached the requested level."]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == VRR_A::B_0X1
    }
}
impl R {
    #[doc = "Bit 0 - Voltage reference buffer mode enable This bit is used to enable the voltage reference buffer mode."]
    #[inline(always)]
    pub fn envr(&self) -> ENVR_R {
        ENVR_R::new((self.bits & 1) != 0)
    }
    #[doc = "Bit 1 - High impedance mode This bit controls the analog switch to connect or not the VREF+ pin. Refer to for the mode descriptions depending on ENVR bit configuration."]
    #[inline(always)]
    pub fn hiz(&self) -> HIZ_R {
        HIZ_R::new(((self.bits >> 1) & 1) != 0)
    }
    #[doc = "Bit 2 - Voltage reference scale This bit selects the value generated by the voltage reference buffer."]
    #[inline(always)]
    pub fn vrs(&self) -> VRS_R {
        VRS_R::new(((self.bits >> 2) & 1) != 0)
    }
    #[doc = "Bit 3 - Voltage reference buffer ready"]
    #[inline(always)]
    pub fn vrr(&self) -> VRR_R {
        VRR_R::new(((self.bits >> 3) & 1) != 0)
    }
}
impl W {
    #[doc = "Bit 0 - Voltage reference buffer mode enable This bit is used to enable the voltage reference buffer mode."]
    #[inline(always)]
    #[must_use]
    pub fn envr(&mut self) -> ENVR_W<VREFBUF_CSR_SPEC> {
        ENVR_W::new(self, 0)
    }
    #[doc = "Bit 1 - High impedance mode This bit controls the analog switch to connect or not the VREF+ pin. Refer to for the mode descriptions depending on ENVR bit configuration."]
    #[inline(always)]
    #[must_use]
    pub fn hiz(&mut self) -> HIZ_W<VREFBUF_CSR_SPEC> {
        HIZ_W::new(self, 1)
    }
    #[doc = "Bit 2 - Voltage reference scale This bit selects the value generated by the voltage reference buffer."]
    #[inline(always)]
    #[must_use]
    pub fn vrs(&mut self) -> VRS_W<VREFBUF_CSR_SPEC> {
        VRS_W::new(self, 2)
    }
    #[doc = r" Writes raw bits to the register."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
    #[inline(always)]
    pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
        self.bits = bits;
        self
    }
}
#[doc = "VREFBUF control and status register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`vrefbuf_csr::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`vrefbuf_csr::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct VREFBUF_CSR_SPEC;
impl crate::RegisterSpec for VREFBUF_CSR_SPEC {
    type Ux = u32;
}
#[doc = "`read()` method returns [`vrefbuf_csr::R`](R) reader structure"]
impl crate::Readable for VREFBUF_CSR_SPEC {}
#[doc = "`write(|w| ..)` method takes [`vrefbuf_csr::W`](W) writer structure"]
impl crate::Writable for VREFBUF_CSR_SPEC {
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
}
#[doc = "`reset()` method sets VREFBUF_CSR to value 0x02"]
impl crate::Resettable for VREFBUF_CSR_SPEC {
    const RESET_VALUE: u32 = 0x02;
}
