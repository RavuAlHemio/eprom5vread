#[doc = "Register `CR1` reader"]
pub type R = crate::R<CR1_SPEC>;
#[doc = "Register `CR1` writer"]
pub type W = crate::W<CR1_SPEC>;
#[doc = "Field `CEN` reader - Counter enable Note: External clock and gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware."]
pub type CEN_R = crate::BitReader<CEN_A>;
#[doc = "Counter enable Note: External clock and gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum CEN_A {
    #[doc = "0: Counter disabled"]
    B_0X0 = 0,
    #[doc = "1: Counter enabled"]
    B_0X1 = 1,
}
impl From<CEN_A> for bool {
    #[inline(always)]
    fn from(variant: CEN_A) -> Self {
        variant as u8 != 0
    }
}
impl CEN_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> CEN_A {
        match self.bits {
            false => CEN_A::B_0X0,
            true => CEN_A::B_0X1,
        }
    }
    #[doc = "Counter disabled"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == CEN_A::B_0X0
    }
    #[doc = "Counter enabled"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == CEN_A::B_0X1
    }
}
#[doc = "Field `CEN` writer - Counter enable Note: External clock and gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware."]
pub type CEN_W<'a, REG> = crate::BitWriter<'a, REG, CEN_A>;
impl<'a, REG> CEN_W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "Counter disabled"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(CEN_A::B_0X0)
    }
    #[doc = "Counter enabled"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(CEN_A::B_0X1)
    }
}
#[doc = "Field `UDIS` reader - Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values."]
pub type UDIS_R = crate::BitReader<UDIS_A>;
#[doc = "Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum UDIS_A {
    #[doc = "0: UEV enabled. The Update (UEV) event is generated by one of the following events:"]
    B_0X0 = 0,
    #[doc = "1: UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller."]
    B_0X1 = 1,
}
impl From<UDIS_A> for bool {
    #[inline(always)]
    fn from(variant: UDIS_A) -> Self {
        variant as u8 != 0
    }
}
impl UDIS_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> UDIS_A {
        match self.bits {
            false => UDIS_A::B_0X0,
            true => UDIS_A::B_0X1,
        }
    }
    #[doc = "UEV enabled. The Update (UEV) event is generated by one of the following events:"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == UDIS_A::B_0X0
    }
    #[doc = "UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller."]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == UDIS_A::B_0X1
    }
}
#[doc = "Field `UDIS` writer - Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values."]
pub type UDIS_W<'a, REG> = crate::BitWriter<'a, REG, UDIS_A>;
impl<'a, REG> UDIS_W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "UEV enabled. The Update (UEV) event is generated by one of the following events:"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(UDIS_A::B_0X0)
    }
    #[doc = "UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller."]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(UDIS_A::B_0X1)
    }
}
#[doc = "Field `URS` reader - Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller"]
pub type URS_R = crate::BitReader<URS_A>;
#[doc = "Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum URS_A {
    #[doc = "0: Any of the following events generate an update interrupt or DMA request if enabled. These events can be:"]
    B_0X0 = 0,
    #[doc = "1: Only counter overflow/underflow generates an update interrupt or DMA request if enabled."]
    B_0X1 = 1,
}
impl From<URS_A> for bool {
    #[inline(always)]
    fn from(variant: URS_A) -> Self {
        variant as u8 != 0
    }
}
impl URS_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> URS_A {
        match self.bits {
            false => URS_A::B_0X0,
            true => URS_A::B_0X1,
        }
    }
    #[doc = "Any of the following events generate an update interrupt or DMA request if enabled. These events can be:"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == URS_A::B_0X0
    }
    #[doc = "Only counter overflow/underflow generates an update interrupt or DMA request if enabled."]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == URS_A::B_0X1
    }
}
#[doc = "Field `URS` writer - Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller"]
pub type URS_W<'a, REG> = crate::BitWriter<'a, REG, URS_A>;
impl<'a, REG> URS_W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "Any of the following events generate an update interrupt or DMA request if enabled. These events can be:"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(URS_A::B_0X0)
    }
    #[doc = "Only counter overflow/underflow generates an update interrupt or DMA request if enabled."]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(URS_A::B_0X1)
    }
}
#[doc = "Field `OPM` reader - One pulse mode"]
pub type OPM_R = crate::BitReader<OPM_A>;
#[doc = "One pulse mode\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum OPM_A {
    #[doc = "0: Counter is not stopped at update event"]
    B_0X0 = 0,
    #[doc = "1: Counter stops counting at the next update event (clearing the bit CEN)"]
    B_0X1 = 1,
}
impl From<OPM_A> for bool {
    #[inline(always)]
    fn from(variant: OPM_A) -> Self {
        variant as u8 != 0
    }
}
impl OPM_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> OPM_A {
        match self.bits {
            false => OPM_A::B_0X0,
            true => OPM_A::B_0X1,
        }
    }
    #[doc = "Counter is not stopped at update event"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == OPM_A::B_0X0
    }
    #[doc = "Counter stops counting at the next update event (clearing the bit CEN)"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == OPM_A::B_0X1
    }
}
#[doc = "Field `OPM` writer - One pulse mode"]
pub type OPM_W<'a, REG> = crate::BitWriter<'a, REG, OPM_A>;
impl<'a, REG> OPM_W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "Counter is not stopped at update event"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(OPM_A::B_0X0)
    }
    #[doc = "Counter stops counting at the next update event (clearing the bit CEN)"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(OPM_A::B_0X1)
    }
}
#[doc = "Field `ARPE` reader - Auto-reload preload enable"]
pub type ARPE_R = crate::BitReader<ARPE_A>;
#[doc = "Auto-reload preload enable\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum ARPE_A {
    #[doc = "0: TIMx_ARR register is not buffered"]
    B_0X0 = 0,
    #[doc = "1: TIMx_ARR register is buffered"]
    B_0X1 = 1,
}
impl From<ARPE_A> for bool {
    #[inline(always)]
    fn from(variant: ARPE_A) -> Self {
        variant as u8 != 0
    }
}
impl ARPE_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> ARPE_A {
        match self.bits {
            false => ARPE_A::B_0X0,
            true => ARPE_A::B_0X1,
        }
    }
    #[doc = "TIMx_ARR register is not buffered"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == ARPE_A::B_0X0
    }
    #[doc = "TIMx_ARR register is buffered"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == ARPE_A::B_0X1
    }
}
#[doc = "Field `ARPE` writer - Auto-reload preload enable"]
pub type ARPE_W<'a, REG> = crate::BitWriter<'a, REG, ARPE_A>;
impl<'a, REG> ARPE_W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "TIMx_ARR register is not buffered"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(ARPE_A::B_0X0)
    }
    #[doc = "TIMx_ARR register is buffered"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(ARPE_A::B_0X1)
    }
}
#[doc = "Field `CKD` reader - Clock division This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and the dead-time and sampling clock (tDTS)used by the dead-time generators and the digital filters (TIx),"]
pub type CKD_R = crate::FieldReader<CKD_A>;
#[doc = "Clock division This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and the dead-time and sampling clock (tDTS)used by the dead-time generators and the digital filters (TIx),\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(u8)]
pub enum CKD_A {
    #[doc = "0: tDTS=tCK_INT"]
    B_0X0 = 0,
    #[doc = "1: tDTS=2*tCK_INT"]
    B_0X1 = 1,
    #[doc = "2: tDTS=4*tCK_INT"]
    B_0X2 = 2,
    #[doc = "3: Reserved, do not program this value"]
    B_0X3 = 3,
}
impl From<CKD_A> for u8 {
    #[inline(always)]
    fn from(variant: CKD_A) -> Self {
        variant as _
    }
}
impl crate::FieldSpec for CKD_A {
    type Ux = u8;
}
impl CKD_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> CKD_A {
        match self.bits {
            0 => CKD_A::B_0X0,
            1 => CKD_A::B_0X1,
            2 => CKD_A::B_0X2,
            3 => CKD_A::B_0X3,
            _ => unreachable!(),
        }
    }
    #[doc = "tDTS=tCK_INT"]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == CKD_A::B_0X0
    }
    #[doc = "tDTS=2*tCK_INT"]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == CKD_A::B_0X1
    }
    #[doc = "tDTS=4*tCK_INT"]
    #[inline(always)]
    pub fn is_b_0x2(&self) -> bool {
        *self == CKD_A::B_0X2
    }
    #[doc = "Reserved, do not program this value"]
    #[inline(always)]
    pub fn is_b_0x3(&self) -> bool {
        *self == CKD_A::B_0X3
    }
}
#[doc = "Field `CKD` writer - Clock division This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and the dead-time and sampling clock (tDTS)used by the dead-time generators and the digital filters (TIx),"]
pub type CKD_W<'a, REG> = crate::FieldWriterSafe<'a, REG, 2, CKD_A>;
impl<'a, REG> CKD_W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
    REG::Ux: From<u8>,
{
    #[doc = "tDTS=tCK_INT"]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(CKD_A::B_0X0)
    }
    #[doc = "tDTS=2*tCK_INT"]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(CKD_A::B_0X1)
    }
    #[doc = "tDTS=4*tCK_INT"]
    #[inline(always)]
    pub fn b_0x2(self) -> &'a mut crate::W<REG> {
        self.variant(CKD_A::B_0X2)
    }
    #[doc = "Reserved, do not program this value"]
    #[inline(always)]
    pub fn b_0x3(self) -> &'a mut crate::W<REG> {
        self.variant(CKD_A::B_0X3)
    }
}
#[doc = "Field `UIFREMAP` reader - UIF status bit remapping"]
pub type UIFREMAP_R = crate::BitReader<UIFREMAP_A>;
#[doc = "UIF status bit remapping\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum UIFREMAP_A {
    #[doc = "0: No remapping. UIF status bit is not copied to TIMx_CNT register bit 31."]
    B_0X0 = 0,
    #[doc = "1: Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31."]
    B_0X1 = 1,
}
impl From<UIFREMAP_A> for bool {
    #[inline(always)]
    fn from(variant: UIFREMAP_A) -> Self {
        variant as u8 != 0
    }
}
impl UIFREMAP_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> UIFREMAP_A {
        match self.bits {
            false => UIFREMAP_A::B_0X0,
            true => UIFREMAP_A::B_0X1,
        }
    }
    #[doc = "No remapping. UIF status bit is not copied to TIMx_CNT register bit 31."]
    #[inline(always)]
    pub fn is_b_0x0(&self) -> bool {
        *self == UIFREMAP_A::B_0X0
    }
    #[doc = "Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31."]
    #[inline(always)]
    pub fn is_b_0x1(&self) -> bool {
        *self == UIFREMAP_A::B_0X1
    }
}
#[doc = "Field `UIFREMAP` writer - UIF status bit remapping"]
pub type UIFREMAP_W<'a, REG> = crate::BitWriter<'a, REG, UIFREMAP_A>;
impl<'a, REG> UIFREMAP_W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "No remapping. UIF status bit is not copied to TIMx_CNT register bit 31."]
    #[inline(always)]
    pub fn b_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(UIFREMAP_A::B_0X0)
    }
    #[doc = "Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31."]
    #[inline(always)]
    pub fn b_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(UIFREMAP_A::B_0X1)
    }
}
impl R {
    #[doc = "Bit 0 - Counter enable Note: External clock and gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware."]
    #[inline(always)]
    pub fn cen(&self) -> CEN_R {
        CEN_R::new((self.bits & 1) != 0)
    }
    #[doc = "Bit 1 - Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values."]
    #[inline(always)]
    pub fn udis(&self) -> UDIS_R {
        UDIS_R::new(((self.bits >> 1) & 1) != 0)
    }
    #[doc = "Bit 2 - Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller"]
    #[inline(always)]
    pub fn urs(&self) -> URS_R {
        URS_R::new(((self.bits >> 2) & 1) != 0)
    }
    #[doc = "Bit 3 - One pulse mode"]
    #[inline(always)]
    pub fn opm(&self) -> OPM_R {
        OPM_R::new(((self.bits >> 3) & 1) != 0)
    }
    #[doc = "Bit 7 - Auto-reload preload enable"]
    #[inline(always)]
    pub fn arpe(&self) -> ARPE_R {
        ARPE_R::new(((self.bits >> 7) & 1) != 0)
    }
    #[doc = "Bits 8:9 - Clock division This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and the dead-time and sampling clock (tDTS)used by the dead-time generators and the digital filters (TIx),"]
    #[inline(always)]
    pub fn ckd(&self) -> CKD_R {
        CKD_R::new(((self.bits >> 8) & 3) as u8)
    }
    #[doc = "Bit 11 - UIF status bit remapping"]
    #[inline(always)]
    pub fn uifremap(&self) -> UIFREMAP_R {
        UIFREMAP_R::new(((self.bits >> 11) & 1) != 0)
    }
}
impl W {
    #[doc = "Bit 0 - Counter enable Note: External clock and gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware."]
    #[inline(always)]
    #[must_use]
    pub fn cen(&mut self) -> CEN_W<CR1_SPEC> {
        CEN_W::new(self, 0)
    }
    #[doc = "Bit 1 - Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values."]
    #[inline(always)]
    #[must_use]
    pub fn udis(&mut self) -> UDIS_W<CR1_SPEC> {
        UDIS_W::new(self, 1)
    }
    #[doc = "Bit 2 - Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller"]
    #[inline(always)]
    #[must_use]
    pub fn urs(&mut self) -> URS_W<CR1_SPEC> {
        URS_W::new(self, 2)
    }
    #[doc = "Bit 3 - One pulse mode"]
    #[inline(always)]
    #[must_use]
    pub fn opm(&mut self) -> OPM_W<CR1_SPEC> {
        OPM_W::new(self, 3)
    }
    #[doc = "Bit 7 - Auto-reload preload enable"]
    #[inline(always)]
    #[must_use]
    pub fn arpe(&mut self) -> ARPE_W<CR1_SPEC> {
        ARPE_W::new(self, 7)
    }
    #[doc = "Bits 8:9 - Clock division This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and the dead-time and sampling clock (tDTS)used by the dead-time generators and the digital filters (TIx),"]
    #[inline(always)]
    #[must_use]
    pub fn ckd(&mut self) -> CKD_W<CR1_SPEC> {
        CKD_W::new(self, 8)
    }
    #[doc = "Bit 11 - UIF status bit remapping"]
    #[inline(always)]
    #[must_use]
    pub fn uifremap(&mut self) -> UIFREMAP_W<CR1_SPEC> {
        UIFREMAP_W::new(self, 11)
    }
    #[doc = r" Writes raw bits to the register."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
    #[inline(always)]
    pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
        self.bits = bits;
        self
    }
}
#[doc = "control register 1\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cr1::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cr1::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct CR1_SPEC;
impl crate::RegisterSpec for CR1_SPEC {
    type Ux = u32;
}
#[doc = "`read()` method returns [`cr1::R`](R) reader structure"]
impl crate::Readable for CR1_SPEC {}
#[doc = "`write(|w| ..)` method takes [`cr1::W`](W) writer structure"]
impl crate::Writable for CR1_SPEC {
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
}
#[doc = "`reset()` method sets CR1 to value 0"]
impl crate::Resettable for CR1_SPEC {
    const RESET_VALUE: u32 = 0;
}
